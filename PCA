{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "pVCsCjCbR_uy"
   },
   "source": [
    "# Excercise of PCA\n",
    "\n",
    "Principal component analysis (PCA) is an algorithm to find the dimensions for which the projected data\n",
    "have the largest variance. \n",
    "\n",
    "## Steps of PCA:\n",
    "\n",
    "* Find D eigenvalues and eigenvectors of the covariance matrix\n",
    "* Select the largest M < D eigenvalues and the corresponding eigenvectors to be the new space. \n",
    "\n",
    "## My understand:\n",
    "\n",
    "* To keep important information as possible, we have to maximum the variances of data in other basis.\n",
    "\n",
    "* The covariance matrix presents variances of data, the norm 2 of the covariance matrix will be maximum when the eigenvalue be maximum in condition the norm 2 of eigenvector equal 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "i1M6gmuAAJtv"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "o2eHTb_9QA0W"
   },
   "source": [
    "## Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 212
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1426,
     "status": "ok",
     "timestamp": 1544548789370,
     "user": {
      "displayName": "TOÀN NGUYỄN DUY VIỆT",
      "photoUrl": "",
      "userId": "18301338610348705581"
     },
     "user_tz": -420
    },
    "id": "uNlWe3QNAkib",
    "outputId": "904e253a-c3df-4625-b4df-aa9c0e744c98"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean: \n",
      " [1.81 1.91]\n",
      "Variance: \n",
      " [[ 0.69  0.49]\n",
      " [-1.31 -1.21]\n",
      " [ 0.39  0.99]\n",
      " [ 0.09  0.29]\n",
      " [ 1.29  1.09]\n",
      " [ 0.49  0.79]\n",
      " [ 0.19 -0.31]\n",
      " [-0.81 -0.81]\n",
      " [-0.31 -0.31]\n",
      " [-0.71 -1.01]]\n"
     ]
    }
   ],
   "source": [
    "#processing data\n",
    "x = np.array([\n",
    "    [2.5,2.4],[0.5, 0.7],[2.2, 2.9], [1.9, 2.2], [3.1, 3.0], [2.3, 2.7], [2, 1.6], [1 , 1.1], [1.5, 1.6], [1.1, 0.9]])\n",
    "\n",
    "m = x.mean(axis = 0)\n",
    "print(\"Mean: \\n\",m)\n",
    "\n",
    "variance  = x - m\n",
    "print(\"Variance: \\n\",variance)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hUwMq7kJQFHQ"
   },
   "source": [
    "## Find  eigvectors and new points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 444
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1409,
     "status": "ok",
     "timestamp": 1544548789371,
     "user": {
      "displayName": "TOÀN NGUYỄN DUY VIỆT",
      "photoUrl": "",
      "userId": "18301338610348705581"
     },
     "user_tz": -420
    },
    "id": "E3a-ufzcB9nB",
    "outputId": "e734bed5-8a74-4eaa-9d8b-41dec7d4f656"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "eigvalue: \n",
      " [[-0.73517866 -0.6778734 ]\n",
      " [ 0.6778734  -0.73517866]]\n",
      "eigvector: \n",
      " [ 0.44175059 11.55624941]\n",
      "-----------------------------------------------------\n",
      "Chosen eigvector index:  1\n",
      "Projected data: \n",
      " [[-0.82797019]\n",
      " [ 1.77758033]\n",
      " [-0.99219749]\n",
      " [-0.27421042]\n",
      " [-1.67580142]\n",
      " [-0.9129491 ]\n",
      " [ 0.09910944]\n",
      " [ 1.14457216]\n",
      " [ 0.43804614]\n",
      " [ 1.22382056]]\n"
     ]
    }
   ],
   "source": [
    "#cov matrix\n",
    "C = np.dot(variance.T,variance)\n",
    "\n",
    "#eigvector and eigvalue\n",
    "lamda,v = np.linalg.eig(C)\n",
    "print(\"eigvalue: \\n\",v)\n",
    "print(\"eigvector: \\n\",lamda)\n",
    "print(\"-----------------------------------------------------\")\n",
    "id = np.argmax(lamda)\n",
    "print(\"Chosen eigvector index: \", id)\n",
    "\n",
    "#new points\n",
    "xx = np.dot(v[:,id],variance.T).reshape(len(x),1)\n",
    "print(\"Projected data: \\n\", xx)\n",
    "o = np.dot(xx,v[:,id].reshape(len(v),1).T) + m \n",
    "#print(\"Projected data: \\n\", xx)\n",
    "#print(o)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "dEu9cfrAQPbv"
   },
   "source": [
    "## Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 347
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1794,
     "status": "ok",
     "timestamp": 1544548789769,
     "user": {
      "displayName": "TOÀN NGUYỄN DUY VIỆT",
      "photoUrl": "",
      "userId": "18301338610348705581"
     },
     "user_tz": -420
    },
    "id": "RTBXwOCARE7s",
    "outputId": "f7455015-b874-4b22-a014-02ccefcacec7"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot \n",
    "plt.plot(x[:,0], x[:,1], 'ro')\n",
    "plt.plot(m[0],m[1],'gs')\n",
    "plt.plot(o[:,0],o[:,1])\n",
    "plt.plot(o[:,0],o[:,1],'bs')\n",
    "\n",
    "for i in range(len(xx)):\n",
    "    plt.plot(np.array([x[i,0],o[i,0]] ) ,np.array([x[i,1],o[i,1]] ),'k-')\n",
    "\n",
    "plt.title(\"data before project(red) and after project(blue) \")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Implement PCA.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
