{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "UgwVJKoZQwQC"
   },
   "source": [
    "# Excercise of LDA\n",
    "\n",
    "## My understand:\n",
    "* We want to classify classes, solution in here is we transform data to another basis. The basis should has the large between-class variance and small the within-class variances. So we optimize the expression: \n",
    "(m1 - m2)^2/s1^2 - s2^2 \n",
    "= w^T*S_B*w / w^T*S_w*w\n",
    "\n",
    "* So the above expression be maximum, the optimal point  is eigenvector whose the eigenvalue of the maxtrix S^-1_W*S_B have to maximum .\n",
    "\n",
    "## Steps:\n",
    "* Find S_B and S_w\n",
    "* Find eigenvector w of maxtrix S^-1_W*S_B\n",
    "* Plot data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "AGQ-8-3qkY9f"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "mLDTTUm1Qgxv"
   },
   "source": [
    "## Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "BKUbIdGJmkwo"
   },
   "outputs": [],
   "source": [
    "# data \n",
    "x = np.array([[4, 2], [2, 4], [2, 3], [3, 6], [4, 4], [9, 10], [6, 8], [9, 5],[8, 7],[10, 8]])\n",
    "\n",
    "y = np.array([1, 1, 1, 1, 1, 2, 2, 2, 2, 2])\n",
    "x1 = x[y == 1]\n",
    "x2 = x[y == 2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 364
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 2554,
     "status": "ok",
     "timestamp": 1544548515729,
     "user": {
      "displayName": "TOÀN NGUYỄN DUY VIỆT",
      "photoUrl": "",
      "userId": "18301338610348705581"
     },
     "user_tz": -420
    },
    "id": "YcF540SL_6aL",
    "outputId": "ec958b89-8264-4a0e-cfd8-8cb3612d96ba"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x16aac83f588>]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD4CAYAAAD1jb0+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAQNklEQVR4nO3df4zcdZ3H8eerLRdYToPC0qLYriaE80ICchuCctcoqAEloOZMMPVCjHH9gyiYuxi9/kH8o4km5qJ/mWxAJXHFIEo05o5A8NTzDzFbfhzFYohKK0LbNf463URB3/fHTKXdtrQz893OfLrPRzL5znz2u/N9ZTp9deYz3+knVYUkqT3rxh1AkjQcC1ySGmWBS1KjLHBJapQFLkmN2nAyD3bOOefUzMzMyTykJDVv586dv6yq6ZXjJ7XAZ2ZmWFxcPJmHlKTmJdlztHGnUCSpURa4JDXKApekRlngktQoC1ySGnXcAk/y+SQHkuw6ZOzlSe5P8mR/+7LVjSlJR7dpEyRHXjZtGney1Xcir8C/CFy9YuxjwANVdQHwQP+2JJ10+/cPNn4qOW6BV9X3gF+tGL4euKN//Q7gHR3nkiQdx7Bz4Bur6lmA/vbcY+2YZC7JYpLFpaWlIQ8nSVpp1T/ErKr5qpqtqtnp6SO+CSpJGtKwBb4/yXkA/e2B7iJJkk7EsAX+TeDG/vUbgW90E0eSBrNx42Djp5Lj/mdWSe4E3gick+Rp4Fbgk8BdSd4P7AXevZohJelY9u0bd4LxOW6BV9V7jvGjqzrOIkkagN/ElKRGWeCS1CgLXJIaZYFLUqMscElqlAUuSY2ywCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1aqQCT3Jzkl1JHk9yS1ehJEnHN3SBJ7kI+ABwGXAxcG2SC7oKJkl6caO8An8t8IOqWq6q54HvAu/sJpYk6XhGKfBdwNYkZyeZAt4GvGrlTknmkiwmWVxaWhrhcJKkQw1d4FW1G/gUcD9wL/Ao8PxR9puvqtmqmp2enh46qCTpcCN9iFlVt1fVpVW1FfgV8GQ3sSRJx7NhlF9Ocm5VHUiyGXgX8PpuYkmSjmekAge+luRs4Dngpqr6dQeZJEknYKQCr6p/6iqIJGkwfhNTkhplgUtSoyxwSWqUBS5JjbLAJalRFrgkNcoCl6RGWeCS1CgLXJIaZYFLUqMscElqlAUuSY2ywCWpURa4JDXKApekRlngktSokQo8yUeSPJ5kV5I7k5zeVTBptW3aBMmRl02bxp1Mp4rVfo4NXeBJXgl8GJitqouA9cAN3cSSVt/+/YONS4Na7efYqFMoG4AzkmwApoBnRo8kSToRQxd4Vf0C+DSwF3gW+G1V3bdyvyRzSRaTLC4tLQ2fVJJ0mFGmUF4GXA+8GngFcGaS967cr6rmq2q2qmanp6eHTypJOswoUyhvBn5WVUtV9RzwdeAN3cSSJB3PKAW+F7g8yVSSAFcBu7uJJa2+jRsHG5cGtdrPsQ3D/mJVPZjkbuAh4HngYWC+m1jS6tu3b9wJdKpb7efY0AUOUFW3Ard2lEWSNAC/iSlJjbLAJalRFrgkNcoCl6RGWeCS1CgLXJIaZYFLUqMscElqlAUuSY2ywCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjRlkT88Ikjxxy+V2SW7oMJ2lybNoEyZGXTZvGnWztGmVFnh8DlwAkWQ/8Arino1ySJsz+/YONa/V1NYVyFfCTqtrT0f1Jko6jqwK/AbjzaD9IMpdkMcni0tJSR4eTJI1c4En+BrgO+OrRfl5V81U1W1Wz09PTox5OktTXxSvwa4CHqsqZMEk6iboo8PdwjOkTSaeOjRsHG9fqG/osFIAkU8BbgA92E0fSpNq3b9wJtNJIBV5Vy8DZHWWRJA3Ab2JKUqMscElqlAUuSY2ywCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1ygKXpEZZ4JLUKAtckho1UoEnOSvJ3UmeSLI7yeu7CjbxFhZgZgbWrettFxbGnUjSGjPSijzAZ4F7q+qf+6vTT3WQafItLMDcHCwv927v2dO7DbBt2/hySVpThn4FnuSlwFbgdoCq+lNV/aarYBNt+/YXyvug5eXeuCSdJKNMobwGWAK+kOThJLclOXPlTknmkiwmWVxaWhrhcBNk797BxiVpFYxS4BuAS4HPVdXrgD8AH1u5U1XNV9VsVc1OT0+PcLgJsnnzYOOStApGKfCngaer6sH+7bvpFfqpb8cOmFox3T811RuXpJNk6AKvqn3Az5Nc2B+6CvhRJ6km3bZtMD8PW7ZA0tvOz/sBpqSTatSzUD4ELPTPQPkp8L7RIzVi2zYLW9JYjVTgVfUIMNtRFknSAPwmpiQ1ygKXpEZZ4JLUKAtckhplgUtSoyxwSWqUBS5JjbLAJalRFrgkNcoCl6RGWeCS1CgLXJIaZYFLUqMscElqlAUuSY2ywCWpUSMVeJKnkjyW5JEki12FkqQTtWlTb2XDlZdNm8adbPWNuqQawJuq6pcd3I8kDWz//sHGTyVOoUhSo0Yt8ALuS7IzydzRdkgyl2QxyeLS0tKIh5MkHTRqgV9RVZcC1wA3Jdm6coeqmq+q2aqanZ6eHvFwkqSDRirwqnqmvz0A3ANc1kUoSdLxDV3gSc5M8pKD14G3Aru6CiZJJ2LjxsHGTyWjnIWyEbgnycH7+XJV3dtJKkk6Qfv2jTvB+Axd4FX1U+DiDrNIkgbgaYSS1CgLXJIaZYFLUqMscElqlAUuSY2ywCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1auQCT7I+ycNJvtVFoCMsLMDMDKxb19suLKzKYU4ZPl7SmjHKijwH3QzsBl7awX0dbmEB5uZgebl3e8+e3m2Abds6P1zzfLykNWWkV+BJzgfeDtzWTZwVtm9/oYwOWl7ujetIPl7SmjLqFMpngI8CfznWDknmkiwmWVxaWhrs3vfuHWx8rfPxktaUUValvxY4UFU7X2y/qpqvqtmqmp2enh7sIJs3Dza+1vl4SWvKKK/ArwCuS/IU8BXgyiRf6iTVQTt2wNTU4WNTU71xHcnHS1pThi7wqvp4VZ1fVTPADcC3q+q9nSWD3gdv8/OwZQskve38vB/IHYuPl7SmpKpGv5PkjcC/VdW1L7bf7OxsLS4ujnw8SVpLkuysqtmV412cRkhVfQf4Thf3JUk6MX4TU5IaZYFLUqMscElqlAUuSY2ywCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1ygKXpEZZ4JLUqFEWNT49yQ+TPJrk8SSf6DLYXy0swMwMrFvX2y4srMphJKk1o6zI80fgyqr6fZLTgO8n+a+q+kFH2XplPTcHy8u923v29G6D6zxKWvNGWdS4qur3/Zun9S+jL7B5qO3bXyjvg5aXe+OStMaNNAeeZH2SR4ADwP1V9eBR9plLsphkcWlpabAD7N072LgkrSEjFXhV/bmqLgHOBy5LctFR9pmvqtmqmp2enh7sAJs3DzYuSWtIJ2ehVNVv6K1Kf3UX9/dXO3bA1NThY1NTvXFJWuNGOQtlOslZ/etnAG8GnugqGND7oHJ+HrZsgaS3nZ/3A0xJYrSzUM4D7kiynt4/BHdV1be6iXWIbdssbEk6iqELvKr+F3hdh1kkSQPwm5iS1CgLXJIaZYFLUqMscElqlAUuSY2ywCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1ygKXpEaNsqTaq5L8d5LdSR5PcnOXwTSkhQWYmYF163rbhYVxJ5K0SkZZUu154F+r6qEkLwF2Jrm/qn7UUTYNamEB5uZgebl3e8+e3m1wWTrpFDT0K/CqeraqHupf/z9gN/DKroJpCNu3v1DeBy0v98YlnXI6mQNPMkNvfcwHj/KzuSSLSRaXlpa6OJyOZe/ewcYlNW3kAk/yt8DXgFuq6ncrf15V81U1W1Wz09PTox5OL2bz5sHGJTVtpAJPchq98l6oqq93E0lD27EDpqYOH5ua6o1LOuWMchZKgNuB3VX1H91F0tC2bYP5ediyBZLedn7eDzClU1SqarhfTP4R+B/gMeAv/eF/r6r/PNbvzM7O1uLi4lDHk6S1KsnOqppdOT70aYRV9X0gI6WSJA3Nb2JKUqMscElqlAUuSY2ywCWpUUOfhTLUwZIlYM+Qv34O8MsO43TFXIMx12DMNZhJzQWjZdtSVUd8E/KkFvgokiwe7TSacTPXYMw1GHMNZlJzwepkcwpFkhplgUtSo1oq8PlxBzgGcw3GXIMx12AmNResQrZm5sAlSYdr6RW4JOkQFrgkNWriC3xSF09OcnqSHyZ5tJ/rE+POdKgk65M8nORb485yUJKnkjyW5JEkE/PfUiY5K8ndSZ7oP89ePwGZLuw/Tgcvv0tyy7hzAST5SP85vyvJnUlOH3cmgCQ39zM9Ps7HKsnnkxxIsuuQsZcnuT/Jk/3ty7o41sQXOC8snvxa4HLgpiR/P+ZMAH8Erqyqi4FLgKuTXD7mTIe6md46pZPmTVV1yYSdq/tZ4N6q+jvgYibgcauqH/cfp0uAfwCWgXvGHIskrwQ+DMxW1UXAeuCG8aaCJBcBHwAuo/dneG2SC8YU54vA1SvGPgY8UFUXAA/0b49s4gt8UhdPrp7f92+e1r9MxCfCSc4H3g7cNu4sky7JS4Gt9BYnoar+VFW/GW+qI1wF/KSqhv0Wc9c2AGck2QBMAc+MOQ/Aa4EfVNVyVT0PfBd45ziCVNX3gF+tGL4euKN//Q7gHV0ca+IL/FAvtnjyOPSnKR4BDgD3V9VE5AI+A3yUFxbamBQF3JdkZ5K5cYfpew2wBHyhP+V0W5Izxx1qhRuAO8cdAqCqfgF8GtgLPAv8tqruG28qAHYBW5OcnWQKeBvwqjFnOtTGqnoWei9KgXO7uNNmCvx4iyePQ1X9uf8W93zgsv7buLFKci1woKp2jjvLUVxRVZcC19CbCts67kD0Xk1eCnyuql4H/IGO3t52IcnfANcBXx13FoD+3O31wKuBVwBnJnnveFNBVe0GPgXcD9wLPEpv+vWU1kSBT/riyf233N/hyHmvcbgCuC7JU8BXgCuTfGm8kXqq6pn+9gC9+dzLxpsIgKeBpw9593Q3vUKfFNcAD1XV/nEH6Xsz8LOqWqqq54CvA28YcyYAqur2qrq0qrbSm8J4ctyZDrE/yXkA/e2BLu504gt8UhdPTjKd5Kz+9TPoPbGfGG8qqKqPV9X5VTVD7633t6tq7K+QkpyZ5CUHrwNvpfe2d6yqah/w8yQX9oeuAn40xkgrvYcJmT7p2wtcnmSq/3fzKibgQ1+AJOf2t5uBdzFZj9s3gRv7128EvtHFnQ69JuZJdAXwL8Bj/flmOM7iySfJecAdSdbT+4fwrqqamFP2JtBG4J7e33k2AF+uqnvHG+mvPgQs9Kcrfgq8b8x5AOjP5b4F+OC4sxxUVQ8muRt4iN4UxcNMztfXv5bkbOA54Kaq+vU4QiS5E3gjcE6Sp4FbgU8CdyV5P71/BN/dybH8Kr0ktWnip1AkSUdngUtSoyxwSWqUBS5JjbLAJalRFrgkNcoCl6RG/T+HaGDXxB+gDwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot before lda\n",
    "plt.plot(x1[:,0], x1[:,1], 'ro')\n",
    "plt.plot(x2[:,0], x2[:,1], 'bs')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ul29oduKQjCR"
   },
   "source": [
    "## Find vector w"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "bTOyh3Lgo9vD"
   },
   "outputs": [],
   "source": [
    "#find w\n",
    "m1 = x1.mean(axis = 0)\n",
    "m2 = x2.mean(axis = 0)\n",
    "m = x.mean(axis = 0)\n",
    "xx = x - m\n",
    "\n",
    "e1 = x1 - m1\n",
    "e2 = x2 - m2\n",
    "sw = np.cov(x1.T) + np.cov(x2.T)\n",
    "\n",
    "w = np.dot(np.linalg.pinv(sw),(m2-m1)*(m2-m1).T)\n",
    "w = w / np.linalg.norm(w)\n",
    "w = w.reshape(1,len(w))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "qC_KrL9KQoa-"
   },
   "source": [
    "## Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 542
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 2529,
     "status": "ok",
     "timestamp": 1544548515733,
     "user": {
      "displayName": "TOÀN NGUYỄN DUY VIỆT",
      "photoUrl": "",
      "userId": "18301338610348705581"
     },
     "user_tz": -420
    },
    "id": "yS79WM8WzUZg",
    "outputId": "f4f37b23-c7fc-4278-9884-f0a9bc9a004d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 4.1931864   1.4358135 ]\n",
      " [ 3.01603722  1.03273896]\n",
      " [ 2.70955588  0.92779489]\n",
      " [ 4.52405583  1.54910844]\n",
      " [ 4.80614908  1.64570164]\n",
      " [11.12031677  3.80777276]\n",
      " [ 7.8221863   2.6784406 ]\n",
      " [ 9.58791007  3.28305241]\n",
      " [ 9.30581682  3.18645921]\n",
      " [11.40241003  3.90436596]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x16aaea3b708>]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot after find w\n",
    "#plot point \n",
    "plt.plot(x1[:,0], x1[:,1], 'ro')\n",
    "plt.plot(x2[:,0], x2[:,1], 'bs')\n",
    "plt.plot(m[0], m[1], 'go')\n",
    "\n",
    "#plot line\n",
    "o = np.dot(w,x.T)\n",
    "o = np.dot(o.T,w)\n",
    "print(o)\n",
    "plt.plot(o[:,0],o[:,1])\n",
    "o1 = o[y==1]\n",
    "o2 = o[y==2]\n",
    "plt.plot(o1[:,0],o1[:,1],'ro')\n",
    "plt.plot(o2[:,0],o2[:,1],'bs')\n",
    "\n",
    "om = np.dot(w,m)\n",
    "om = np.dot(om,w)\n",
    "plt.plot(om[0],om[1],'go')\n",
    "\n",
    "for i in range(len(x)):\n",
    "    plt.plot(np.array([x[i,0],o[i,0]] ) ,np.array([x[i,1],o[i,1]] ),'g-')\n",
    "\n",
    "plt.plot(np.array([m[0],om[0]]), np.array([m[1],om[1]]), 'g-')  \n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "Implement LDA.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
